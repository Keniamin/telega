#!/usr/bin/env python
# -*- coding: utf8 -*-

import os
import site
import json
import logging
import traceback

from wsgiref.simple_server import make_server
from fresco import FrescoApp, GET, Response, context

site.addsitedir(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telega.common import config, init_logging, get_lock
import telega.views

tabs = []
files_cache = {}


def log_error(request, exc_info):
    _, exc, tb = exc_info
    logging.warning('Exception occured: %s\n%s', exc, ''.join(traceback.format_tb(tb)))
    return Response.internal_server_error()


def load_cached_file(path):
    if path not in files_cache:
        with open(path) as file:
            files_cache[path] = file.read()
    return files_cache[path]


def base(page=None):
    if not page:
        return Response.redirect('/current/')

    columns = None
    for tab in tabs:
        if tab['link'] == page:
            columns = tab['_object'].columns
            break
    else:
        logging.warning('Requested page %s not found', page)
        return Response.not_found()

    page_info = {
        'columns': columns,
        'tabs': [
            {k: v for k, v in tab.iteritems() if not k.startswith('_')}
            for tab in tabs
        ],
    }
    if context.request.form.get('hl'):
        page_info['hl'] = context.request.form.get('hl')

    logging.info('Rendering page %s', page)
    template = load_cached_file('templates/base.html')
    return Response(template.replace('PAGE_INFO_PLACEHOLDER', json.dumps(page_info)))


def static():
    logging.info('Requested static resource: %s', context.request.path)
    try:
        return Response(load_cached_file(context.request.path[1:]))
    except IOError as err:
        logging.warning('Error getting resource: %s', err)
        return Response.not_found()


def make_app():
    app = FrescoApp()
    app.process_exception(log_error)

    for name, obj in telega.views.__dict__.iteritems():
        if name.endswith('View'):
            tabs.append({
                'name': obj.name,
                'link': obj.link,
                '_order': obj.order,
                '_object': obj,
            })
            app.include('/api/' + obj.link, obj())
    tabs.sort(key=(lambda t: t['_order']))

    app.include('/api/logmon', telega.views.LogMonitoring())
    app.route_all('/static/', GET, static)
    app.route('/<page:str>/', GET, base)
    app.route('/', GET, base)
    return app


def main():
    init_logging('logs/web.log')
    if not get_lock('web'):
        logging.info('Lock aquired by other process, exit')
        return

    app = make_app()
    server = make_server('localhost', config['web']['port'], app)
    server.serve_forever()

if __name__ == '__main__':
    main()
